// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  username  String
  motto     String?
  createdAt DateTime @default(now())
  courses   Course[]
  homeworks Homework[]
  exams     Exam[]
  semesters UserSemester[]
}

model Course {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  semester    String?
  color       String? @default("#1976d2")
  userId      Int
  user        User    @relation(fields: [userId], references: [id])
  homeworks   Homework[]
  exams       Exam[]
  createdAt   DateTime @default(now())
}

enum HomeworkStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

model Homework {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  dueDate     DateTime
  semester    String?
  course      Course  @relation(fields: [courseId], references: [id])
  courseId    Int
  user        User    @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      HomeworkStatus @default(PENDING)
  grade       Int?
}

enum ExamStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

model Exam {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  examDate    DateTime
  semester    String?
  course      Course  @relation(fields: [courseId], references: [id])
  courseId    Int
  user        User    @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      ExamStatus @default(PENDING)
  grade       Int?
  examType    String? // e.g., "Midterm", "Final", "Quiz", "Assignment"
  location    String? // exam location/room
  duration    Int?    // duration in minutes
}

model UserSemester {
  id        Int      @id @default(autoincrement())
  name      String
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  @@unique([userId, name])
}
